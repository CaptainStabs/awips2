#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##

##
#
# SOFTWARE HISTORY
# Date         Ticket#    Engineer    Description
# ------------ ---------- ----------- --------------------------
# Feb 09, 2015  #4103     dgilling    Refactored to support multiple svcbu 
#                                     sites.
#
##


if [ ${#AWIPS_HOME} = 0 ]
then
        path_to_script=`readlink -f $0`
		export AWIPS_HOME=$(dirname $(dirname $(dirname $(dirname  $path_to_script))))
fi

# $1 = Site name

. ${AWIPS_HOME}/GFESuite/ServiceBackup/configuration/svcbu.env
source ${AWIPS_HOME}/GFESuite/ServiceBackup/scripts/serviceBackupUtil.sh

SITE=`echo ${1} | tr '[A-Z]' '[a-z]'`
CAPS_SITE=`echo ${1} | tr [a-z] [A-Z]`
export SITE

configureLogging "svcbu_export_config" ${SITE}

lock_file=$(getLockFile "exportConfig" ${SITE})
lock_status=$(isOperationInProgress "exportConfig" ${SITE})
if [[ "${lock_status}" = "true" ]]
then
	echo "Cannot export configuration for ${CAPS_SITE}.  Export configuration process already in progress!"
	exit 1
fi

echo "IN_PROGRESS" > ${lock_file}

OUTPUT_DIR=$(getTempDirectory "export_configuration" ${CAPS_SITE})

echo "Changing to output directory: ${OUTPUT_DIR}"
cd ${OUTPUT_DIR}

echo "Clearing contents of ${OUTPUT_DIR}"
rm -rf ${OUTPUT_DIR}/*

echo "Writing site ID to text file..."
echo $SITE > ${OUTPUT_DIR}/siteID.txt 

echo "Preparing configuration files for export..."

edexDest=GFEconfig/edex_static
commonDest=GFEconfig/common_static
caveDest=GFEconfig/cave_static 
rsyncParms=GFEConfig    # DR 16464

echo "Making temporary edex configuration directories..."
mkdir -p $edexDest/site

echo "Making temporary common configuration directories..."
mkdir -p $commonDest/site

echo "Making temporary cave configuration directories"
mkdir -p $caveDest/site

# DR 16464
echo "Making temporary rsync_parms directory"
mkdir -p $rsyncParms/site

# Copies the localization information to the staging area
echo "Copying common site configuration for site ${CAPS_SITE} to temporary directory..."
cp -r ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/gfe $commonDest/site
cp -r ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/vtec $commonDest/site
cp -r ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/mixedCase $commonDest/site

echo "Copying edex site configuration for site ${CAPS_SITE} to temporary directory..."
cp -r ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE}/config/gfe $edexDest/site

echo "Copying edex smartinit for site ${CAPS_SITE} to temporary directory..."
cp -r ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE}/smartinit $edexDest/site

echo "Copying cave site configuration for site ${CAPS_SITE} to temporary directory..."
cp -r ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE}/gfe $caveDest/site

echo "Copying cave site maps configuration for site ${CAPS_SITE} to temporary directory..."
mkdir $caveDest/site/bundles
cp -r ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE}/bundles/maps $caveDest/site/bundles

echo "Copying cave site colormaps configuration for site ${CAPS_SITE} to temporary directory..."
cp -r ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE}/colormaps $commonDest/site

# DR 16464
if [ -f /awips2/GFESuite/ServiceBackup/data/rsync_parms.${CAPS_SITE} ]; then
    echo "Copying the rsync_parms file for site ${CAPS_SITE} to temporary directory..."
    cp -a /awips2/GFESuite/ServiceBackup/data/rsync_parms.${CAPS_SITE} $rsyncParms/site
fi

# Tar up everything.
echo "Tarring and zipping configuration to file GFEconfig.${SITE}.tar.gz"
tar cf - GFEconfig|gzip -9 - > GFEconfig.${SITE}.tar.gz
if [ $? -ne 0 ]
then
   echo "Failed to make GFEConfig tar file.Program exits now."
   echo "FAILED" > ${lock_file}
   exit 1
fi

# Cleanup
echo "Cleaning up temporary files"
rm -fr GFEconfig

echo "Preparing compressed file for exporting to central server..."
echo "Compressing to file svc_bkup_${SITE}.tar"
tar cf svc_bkup_${SITE}.tar *.gz siteID.txt

#check for failure of the tar file
if [ $? -ne 0 ]
then
  echo "failed to make the tar file. Program exits."

  echo "FAILED" > ${lock_file}
  exit 1
fi

# Cleanup zip files
#
echo "Cleaning up zip files"
rm -f *.gz
rm siteID.txt


echo "Sending the tar file to the central server..."

# Check to see if ${SVCBU_WMO_HEADER} is assigned a value. If so, call msg_send with -i.
# Otherwise, don't call it with -i
if [ -n "${SVCBU_WMO_HEADER}" ]; then
	echo "$MSG_SEND_COMMAND -e ${OUTPUT_DIR}/svc_bkup_${SITE}.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s ${SITE}2 -c 20"
    msgSendOutput=$($MSG_SEND_COMMAND -e ${OUTPUT_DIR}/svc_bkup_${SITE}.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s ${SITE}2 -c 20)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
		echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
		echo "FAILED" > ${lock_file}
	exit 1
    fi
else
	echo "$MSG_SEND_COMMAND -e ${OUTPUT_DIR}/svc_bkup_${SITE}.tar -a ${SVCBU_ADDRESSEE} -s ${SITE}2 -c 20"
    msgSendOutput=$($MSG_SEND_COMMAND -e ${OUTPUT_DIR}/svc_bkup_${SITE}.tar -a ${SVCBU_ADDRESSEE} -s ${SITE}2 -c 20)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
		echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
		echo "FAILED" > ${lock_file}
	exit 1
    fi
fi
echo "Successfully sent message. MESSAGE ID: $msgSendOutput"

echo "SUCCESS" > ${lock_file}
echo "Configuration data has been exported!"
exit 0
